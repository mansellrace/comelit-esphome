esphome:
  name: comelit
  friendly_name: comelit
  includes:
    - comelit.h

esp8266:
  board: d1_mini    

# Enable logging
logger:
  #level: VERY_VERBOSE

ota:
  password: "----------------incolla qui la tua ota password---------------------"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Comelit Fallback Hotspot"
    password: "comelit"

captive_portal:
api:
  encryption:
    key: "----------------incolla qui la tua encription key---------------------"
  services:

    - service: invia_codice
      variables:
        comando: int
        indirizzo: int
      then:
        - remote_transmitter.transmit_raw:
            carrier_frequency: 25kHz
            code: !lambda return comelit_encode(indirizzo, comando);
        - homeassistant.service:
            service: logbook.log
            data:
              name: "Citofono:"
              entity_id: "binary_sensor.comelit_stato"
            data_template:
              message: "Inviato comando personalizzato {{ com }}, indirizzo {{ ind }}"
            variables:
              com: 'return comando;'
              ind: 'return indirizzo;'

    - service: apri_portone_esterno
      then:
        - remote_transmitter.transmit_raw:
            carrier_frequency: 25kHz
            code: !lambda return comelit_encode(1, 16);
        - homeassistant.service:
            service: logbook.log
            data:
              name: "Citofono:"
              entity_id: "binary_sensor.comelit_stato"
              message: "aperto portone esterno tramite domotica"


    - service: apri_portone_interno
      then:
        - remote_transmitter.transmit_raw:
            carrier_frequency: 25kHz
            code: !lambda return comelit_encode(1, 29);
        - homeassistant.service:
            service: logbook.log
            data:
              name: "Citofono:"
              entity_id: "binary_sensor.comelit_stato"
              message: "aperto portone interno tramite domotica"

    - service: apri_portoni
      then:
        - remote_transmitter.transmit_raw:
            carrier_frequency: 25kHz
            code: !lambda return comelit_encode(1, 16);
        - delay: 100ms
        - remote_transmitter.transmit_raw:
            carrier_frequency: 25kHz
            code: !lambda return comelit_encode(1, 29);
        - homeassistant.service:
            service: logbook.log
            data:
              name: "Citofono:"
              entity_id: "binary_sensor.comelit_stato"
              message: "aperti entrambi portoni tramite domotica"


globals:
  - id: codice
    type: int
    restore_value: no
    initial_value: '0'
  - id: indirizzo
    type: int
    restore_value: no
    initial_value: '0'
  - id: descrizione
    type: std::string

binary_sensor:
  - platform: status
    id: stato
    name: "stato"
    icon: mdi:doorbell

remote_transmitter:
  pin: D1
  carrier_duty_percent: 50%

remote_receiver:
  pin:
    number: D6
    inverted: false
  #dump: raw
  idle: 10ms
  filter: 250us
  buffer_size: 3k
  on_raw:
    then:
      - lambda: |-
          id(codice) = 0;
          id(indirizzo) = 0;
          ESP_LOGV("DEBUG", "RICEVUTO CODICE RAW DI LUNGHEZZA %u", size(x));
          char message[18];
          int bits = 0;
          if (size(x) == 38) {
            for (auto it = x.begin() + 1; it != x.end() -1; it+=2) {
              if (-*it < 2500 && -*it > 1000)
              {
                message[bits] = 0;
                bits += 1;
              }
              else if (-*it < 6200 && -*it > 3500)
              {
                message[bits] = 1;
                bits += 1;
              }
              if (bits == 18) {
                int sum = 0;
                int checksum = 0;
                for (int i = 0; i < 14; i++)
                {
                  if (message[i] == 1) sum++;
                }
                checksum = (message[17] * 8) + (message[16] * 4) + (message[15] * 2) + message[14];

                if (checksum == sum) {
                  int msgCode[6];
                  int msgAddr[8];
                  for (int j = 0; j < 14; j++)
                  {
                    if (j < 6) msgCode[j] = message[j];
                    else msgAddr[j - 6] = message[j];
                  }
                  id(codice) = (msgCode[5] * 32) + (msgCode[4] * 16) + (msgCode[3] * 8) + (msgCode[2] * 4) + (msgCode[1] * 2) + msgCode[0];
                  id(indirizzo) = (msgAddr[7] * 128) + (msgAddr[6] * 64) + (msgAddr[5] * 32) + (msgAddr[4] * 16) + (msgAddr[3] * 8) + (msgAddr[2] * 4) + (msgAddr[1] * 2) + msgAddr[0];
                  if (id(codice) < 63)
                  {
                    ESP_LOGD("DEBUG", "RICEVUTO COMANDO = %i", id(codice));
                    ESP_LOGD("DEBUG", "RICEVUTO INDIRIZZO = %i", id(indirizzo));
                    ESP_LOGD("DEBUG", "CHECKSUM OK");
                    auto capi = new esphome::api::CustomAPIDevice();
                    capi->fire_homeassistant_event("esphome.comelit_ricevuto", {{"indirizzo", std::to_string(id(indirizzo))}, {"comando", std::to_string(id(codice))}});
                  } else {
                    id(codice) = 0;
                    id(indirizzo) = 0;
                  }
                }
              }
            }
          }

# ------------------------------------------------------------------------------------------------------------
# ELIMINARE LA PARTE SEGUENTE SE NON SI VUOLE OTTENERE UN LOG COMPLETO DI TUTTI I MESSAGGI CHE PASSANO SUL BUS
# ------------------------------------------------------------------------------------------------------------

      - if:
          condition:
            lambda: 'return (id(codice) > 0) && (id(indirizzo) > 0);'
          then:
            - lambda: |-
                std::string str = "";
                if (id(codice) == 50){
                  str = "chiamata all'interno " + to_string(id(indirizzo));
                } else if (id(codice) == 16) {
                  str = "apertura portone esterno da interno " + to_string(id(indirizzo));
                } else if (id(codice) == 20) {
                  str = "avvio video da interno " + to_string(id(indirizzo));
                } else if (id(codice) == 17) {
                  str = "avvio audio da interno " + to_string(id(indirizzo));
                } else if (id(codice) == 29) {
                  if (id(indirizzo) == 1) {
                    str = "apertura portone scala A";
                  } else if (id(indirizzo) == 2) {
                    str = "apertura portone scala B";
                  } else if (id(indirizzo) == 4) {
                    str = "apertura portone scala C";
                  }
                }
                id(descrizione) = str;
                id(codice) = 0;
                id(indirizzo) = 0;
            - if:
                condition:
                    lambda: 'return id(descrizione) != "";'
                then:
                  - logger.log:
                      format: "Descrizione codice: %s"
                      args: ['id(descrizione).c_str()']
                  - homeassistant.service:
                      service: logbook.log
                      data:
                        name: "Citofono:"
                        entity_id: "binary_sensor.comelit_stato"
                      data_template:
                        message: "{{ com }}"
                      variables:
                        com: 'return id(descrizione).c_str();'
                  - lambda: 'id(descrizione) = "";'

#      - homeassistant.event:
#          event: esphome.comelit_raw
#          data:
#             code: !lambda '
#             std::string str = "";
#             for (auto it = x.begin(); it != x.end(); ++it)
#             {
#               str += to_string(*it);
#               if (it != x.end() - 1) str += ", ";
#             }
#             return esphome::to_string("[" + str + "]");'

